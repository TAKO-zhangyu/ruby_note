#https://www.youtube.com/watch?v=5tXUSOkih-0&t=21s
#オブジェクト指向のノート

class Alcohol
  #下に書いてあるのは、定義するメソッド。アルコールという区分の中で、どんなアルコールなのかを定義するために、具体的なアルコールの種類の名前をインスタンス変数の中に追加する。これをするところをセッターと言う。
  #メソッドにendを入れると終わりというのが通常のメソッドだけども、インスタンス変数は、メソッドの中で＠を付けることで、別メソッドでも情報を呼び出すことができる。一度定義したものを流用できて、いちいち定義し直さなくてもいいということ。
  def name=(name)
    @name = name
  end

  #これで、さっき定義したものを受け取れる。これをゲッターと言う。ここまでnameぐらいしか書いていないのは、あとでnameの中身を付け加えるから。あとで中身を付け加えたときに、うまく動いてくれるように今はここで導線を作っているだけ。血液が通るために血管を作っているようなもの。
  def name
    @name
  end
end

#alcという変数を作り出す。上でやったことをalc変数に収めるために。収めることで、1つにまとまるから使いやすくなる。収めるためには、クラスをそのまま入れる事はできなくて、クラス名に.newを付ける事で概念がモノ（オブジェクト）に変わり、格納できる。英語の動詞を名詞として使うためにingを付けて動名詞に変える、という感覚。
alc = Alcohol.new

#ここでアルコールの名前の情報を変数に入れる。これはclass Alcoholの中のセッターに向けて入っている。
alc.name = "オリオンビール"

#オリオンビールという名前がセッターに入ったら、その名前はゲッターが受け取っているはずなので、それを表示する。
puts alc.name

--------------------------------------------
#現場では省略形をメインで使うそうで、その説明

#これがさっき書いたセッターだけども
def name=(name)
  @name = name
end

#これが省略形。こう書くことが多いよ。
 attr_writer :name

#これも、さっき書いたゲッターだけども
 def name
  @name
end
end

#これが省略形
attr_reader :name

#全体の書き方はこのような感じ。
class Alcohol
  attr_writer :name
  attr_reader :name
end

#ゲッターとセッターがどちらも共存しているなら、さらに省略できる。以下のように。
class Alcohol
  attr_accessor :name
end

#これがわかれば、https://arcane-gorge-21903.herokuapp.com/texts/203 やQ19も理解しやすい。